)
# Categorical summaries including numeric summaries within each category
cat_vars <- c("hist", "hrlevel", "nodediss")
cat_summary <- data %>%
pivot_longer(cols = all_of(cat_vars), names_to = "Variable", values_to = "CategoryName") %>%
group_by(tx, Variable, CategoryName) %>%
summarise(
n = n(),
percent = round(100 * n / sum(n), 1),
mean = round(mean(pathsize, na.rm = TRUE), 2),
median = round(median(pathsize, na.rm = TRUE), 2),
sd = round(sd(pathsize, na.rm = TRUE), 2),
min = round(min(pathsize, na.rm = TRUE), 2),
max = round(max(pathsize, na.rm = TRUE), 2),
.groups = "drop"
) %>%
mutate(Category = paste0(CategoryName, " (", n, ", ", percent, "%)")) %>%
select(tx, Variable, Category, n, mean, median, sd, min, max)
# Combine numeric and categorical
summary_table <- bind_rows(num_summary, cat_summary) %>%
arrange(tx, Variable)
# Print table in LaTeX
summary_table %>%
kable("latex", booktabs = TRUE,
caption = "\\textbf{Summary of Baseline Characteristics by Treatment Group}") %>%
kable_styling(latex_options = c("hold_position")) %>%
collapse_rows(columns = 1, latex_hline = "major")
install.packages(c("officer", "purrr"))
install.packages("styler")
# Load required packages
library(officer)
library(docxtractr)
# List all SOP files in the working directory
files <- list.files(pattern = "^SOP\\s*[0-9]+\\.docx$", full.names = TRUE)
files
# Sort files numerically (so SOP 2 comes before SOP 10)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
files
# Create a new, empty Word document
merged_doc <- read_docx()
# Load required packages
library(officer)
library(docxtractr)
# Automatically use the directory where this script is located
# This works when running the script via Rscript or source()
script_dir <- dirname(normalizePath(sys.frame(1)$ofile))
setwd(script_dir)
# Load required packages
library(officer)
library(docxtractr)
# Try to detect the script's directory
if (!interactive()) {
# When run as a script (Rscript or source)
script_dir <- dirname(normalizePath(sys.frame(1)$ofile))
} else {
# When running interactively in RStudio or console
script_dir <- getwd()
}
setwd(script_dir)
cat("📂 Using directory:", script_dir, "\n")
# Load required packages
library(officer)
library(docxtractr)
# Use current working directory (where the script and files are)
script_dir <- getwd()
setwd(script_dir)
cat("📂 Using current directory:", script_dir, "\n")
setwd("E:/DSAS/SOPS")
# Load required packages
library(officer)
library(docxtractr)
# Use current working directory (where the script and files are)
script_dir <- getwd()
setwd(script_dir)
cat("📂 Using current directory:", script_dir, "\n")
# List all SOP files (e.g., "SOP 1 Policies and Strategies.docx")
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
# Sort numerically based on the SOP number
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
files
# Display the list of files found
print(files)
# Stop if no SOP files are found
if (length(files) == 0) stop("❌ No SOP Word files found in the current directory.")
# Create a new empty Word document
merged_doc <- read_docx(path = NULL)
# Load required packages
library(officer)
library(docxtractr)
# Use current working directory (where the script and files are)
script_dir <- getwd()
setwd(script_dir)
cat("📂 Using current directory:", script_dir, "\n")
# List all SOP files (e.g., "SOP 1 Policies and Strategies.docx")
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
# Sort numerically based on the SOP number
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
# Display the list of files found
print(files)
# Stop if no SOP files are found
if (length(files) == 0) stop("❌ No SOP Word files found in the current directory.")
# Create a new empty Word document
merged_doc <- read_docx()
# Loop through each file and merge contents
for (f in files) {
doc <- read_docx(f)
text <- docx_extract_all(doc)
# Add the SOP title (file name)
merged_doc <- body_add_par(merged_doc, basename(f), style = "heading 1")
# Add the document content
merged_doc <- body_add_par(merged_doc, paste(unlist(text), collapse = "\n"))
# Add a page break between SOPs
merged_doc <- body_add_break(merged_doc)
}
# Load required packages
library(officer)
library(docxtractr)
# Use current working directory
script_dir <- getwd()
setwd(script_dir)
cat("📂 Using current directory:", script_dir, "\n")
# List all SOP files
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
print(files)
if (length(files) == 0) stop("❌ No SOP Word files found in the current directory.")
# Create a blank base Word document (fix for older officer versions)
merged_doc <- officer::read_docx(system.file("template.docx", package = "officer"))
# Merge SOP documents
for (f in files) {
doc <- read_docx(f)
text <- docxtractr::docx_extract_all_tbls(doc)
# Add SOP title
merged_doc <- body_add_par(merged_doc, basename(f), style = "heading 1")
# Add text content
merged_doc <- body_add_par(merged_doc, paste(unlist(text), collapse = "\n"))
# Add page break
merged_doc <- body_add_break(merged_doc)
}
# Load packages
library(officer)
library(docxtractr)
# Use current directory
setwd(".")
# List all SOP Word files in current directory
files <- list.files(pattern = "^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
# Stop if no files are found
if (length(files) == 0) stop("❌ No SOP Word files found in the current directory.")
# Sort files numerically (so SOP 2 < SOP 10)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
# Create a new empty Word document
merged_doc <- read_docx()
# Merge all SOPs
for (f in files) {
message("Merging: ", basename(f))
# Add SOP title
merged_doc <- body_add_par(merged_doc, basename(f), style = "heading 1")
# Append the entire document content
merged_doc <- body_add_docx(merged_doc, src = f)
# Add a page break between SOPs
merged_doc <- body_add_break(merged_doc)
}
# Save merged output
print(merged_doc, target = "Merged_SOPs.docx")
message("✅ Merging complete! File saved as 'Merged_SOPs.docx'")
# Load package
library(officer)
# Use current working directory
script_dir <- getwd()
cat("Using directory:", script_dir, "\n")
# Find SOP files (matches "SOP <number> ... .docx")
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
cat("Files found:\n")
print(files)
if (length(files) == 0) stop("No SOP Word files found in current directory.")
# Start merged_doc from the first file (avoids needing a blank template)
merged_doc <- read_docx(files[1])
cat("Started from:", basename(files[1]), "\n")
# Append the rest, adding a heading for each appended SOP and a page break
if (length(files) > 1) {
for (f in files[-1]) {
cat("Appending:", basename(f), "\n")
# Add SOP filename as a heading before the file content
merged_doc <- body_add_par(merged_doc, basename(f), style = "heading 1")
# Append full .docx (preserves formatting)
merged_doc <- body_add_docx(merged_doc, src = f)
# Page break
merged_doc <- body_add_break(merged_doc)
}
}
# Save merged document
out <- file.path(script_dir, "Merged_SOPs.docx")
print(merged_doc, target = out)
cat("Saved merged file to:", out, "\n")
library(officer)
# working dir
script_dir <- getwd()
cat("Using directory:", script_dir, "\n")
# find and sort SOPs
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
if (length(files) == 0) stop("No SOP Word files found in current directory.")
print(files)
# start from first file so formatting is preserved
merged_doc <- read_docx(files[1])
cat("Started from:", basename(files[1]), "\n")
# append the rest, using fpar headings (avoids named styles)
if (length(files) > 1) {
for (f in files[-1]) {
cat("Appending:", basename(f), "\n")
# create a formatted heading paragraph (bold, font size 14)
heading_par <- fpar(ftext(basename(f),
prop = fp_text(font.size = 14, bold = TRUE)))
merged_doc <- body_add_fpar(merged_doc, heading_par)
# append full .docx (preserves tables, images, styles)
merged_doc <- body_add_docx(merged_doc, src = f)
# page break
merged_doc <- body_add_break(merged_doc)
}
}
# save
out <- file.path(script_dir, "Merged_SOPs.docx")
print(merged_doc, target = out)
library(officer)
script_dir <- getwd()
cat("Using directory:", script_dir, "\n")
# find SOP files
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
if (length(files) == 0) stop("No SOP Word files found in current directory.")
print(files)
# Start merged_doc from the first file (so we inherit a real docx structure)
merged_doc <- read_docx(files[1])
cat("Started merged_doc from:", basename(files[1]), "\n")
# function to insert a bold heading (does not rely on named Word styles)
add_heading_safe <- function(doc, text, size = 14) {
hp <- fpar(ftext(text, prop = fp_text(font.size = size, bold = TRUE)))
body_add_fpar(doc, hp)
}
# loop through the remaining files
for (f in files[-1]) {
bn <- basename(f)
cat("Processing:", bn, "...\n")
# add heading
merged_doc <- add_heading_safe(merged_doc, bn)
# try to append the full .docx (preserve tables/images/styles)
ok <- FALSE
try({
merged_doc <- body_add_docx(merged_doc, src = f)
ok <- TRUE
cat("  -> appended with body_add_docx (format-preserving).\n")
}, silent = TRUE)
# fallback: extract plain text via docx_summary and append as paragraphs
if (!ok) {
cat("  -> body_add_docx failed; falling back to text extraction.\n")
# read the doc and get content summary
tmp_doc <- read_docx(f)
summary_df <- docx_summary(tmp_doc)
# select useful text rows (paragraphs, table cells)
keep <- summary_df$text[!is.na(summary_df$text) & nzchar(summary_df$text)]
# append content as paragraphs (keeps order)
if (length(keep) > 0) {
# append chunked to avoid very large single paragraph
for (chunk in split(keep, ceiling(seq_along(keep)/50))) {
merged_doc <- body_add_par(merged_doc, paste(chunk, collapse = "\n"))
}
cat("  -> appended text fallback (plain text).\n")
} else {
cat("  -> no textual content found for fallback.\n")
}
}
# page break after each SOP appended
merged_doc <- body_add_break(merged_doc)
}
# save merged file
out <- file.path(script_dir, "Merged_SOPs.docx")
print(merged_doc, target = out)
# Load package quietly
suppressPackageStartupMessages(library(officer))
# Use current working directory (script folder)
script_dir <- getwd()
cat("Using directory:", script_dir, "\n")
# List all .docx files that begin with "SOP <number> ..." (case-insensitive)
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
if (length(files) == 0) stop("No SOP Word files found in current directory.")
cat("Files to merge (in order):\n"); print(files)
# Helper to append a simple bold heading (does not require named Word styles)
add_heading_safe <- function(doc, text, size = 14) {
hp <- fpar(ftext(text, prop = fp_text(font.size = size, bold = TRUE)))
body_add_fpar(doc, hp)
}
# Start merged_doc from the first SOP file (this avoids 'no template' errors)
merged_doc <- read_docx(files[1])
cat("Started merged_doc from:", basename(files[1]), "\n")
# Loop over remaining files and try to append with body_add_docx()
for (f in files[-1]) {
bn <- basename(f)
cat("Processing:", bn, "...\n")
# Insert heading (bold text)
merged_doc <- add_heading_safe(merged_doc, bn)
# Try format-preserving append; on error fall back to text extraction
appended <- FALSE
try({
merged_doc <- body_add_docx(merged_doc, src = f)
appended <- TRUE
cat("  -> appended with body_add_docx (format-preserving)\n")
}, silent = TRUE)
if (!appended) {
cat("  -> body_add_docx failed; falling back to text extraction\n")
# read doc and extract text summary
tmp_doc <- read_docx(f)
summary_df <- docx_summary(tmp_doc)
# Keep only non-empty text items (preserves order)
keep <- summary_df$text[!is.na(summary_df$text) & nzchar(summary_df$text)]
if (length(keep) > 0) {
# append in chunks so paragraphs aren't too huge
chunk_size <- 50
groups <- split(keep, ceiling(seq_along(keep) / chunk_size))
for (g in groups) {
merged_doc <- body_add_par(merged_doc, paste(g, collapse = "\n"))
}
cat("  -> appended text fallback (plain text)\n")
} else {
cat("  -> no textual content found to append (fallback)\n")
}
}
# page break after each appended SOP
merged_doc <- body_add_break(merged_doc)
}
# Load required package
suppressPackageStartupMessages(library(officer))
script_dir <- getwd()
cat("Working directory:", script_dir, "\n")
# Find SOP files
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
if (length(files) == 0) stop("No SOP Word files found in current directory.")
cat("Files to merge (in order):\n"); print(files)
# Helper: add a bold heading (avoids relying on named Word styles)
add_heading_safe <- function(doc, text, size = 14) {
hp <- fpar(ftext(text, prop = fp_text(font.size = size, bold = TRUE)))
body_add_fpar(doc, hp)
}
# Start merged_doc from the first file so we don't need an external template
merged_doc <- read_docx(files[1])
cat("Started merged_doc from:", basename(files[1]), "\n")
# Vector to record fallback usage
fallback_files <- character(0)
# Loop through remaining files
for (f in files[-1]) {
bn <- basename(f)
cat("\n--- Processing:", bn, " ---\n")
# Add filename heading
merged_doc <- add_heading_safe(merged_doc, bn)
# Attempt format-preserving append inside tryCatch
appended_ok <- FALSE
tryCatch({
merged_doc <- body_add_docx(merged_doc, src = f)
appended_ok <- TRUE
cat("Appended with body_add_docx (format-preserving).\n")
}, error = function(e) {
# Catch error, log and continue to fallback
cat("body_add_docx ERROR for", bn, ":\n", conditionMessage(e), "\n")
}, warning = function(w) {
# Catch warnings (optional)
cat("body_add_docx WARNING for", bn, ":\n", conditionMessage(w), "\n")
})
# Fallback if body_add_docx failed
if (!appended_ok) {
fallback_files <- c(fallback_files, bn)
cat("FALLBACK: extracting textual content and appending as paragraphs...\n")
# Read doc and get summary
tmp_doc <- read_docx(f)
sum_df <- docx_summary(tmp_doc)
# Keep non-empty text rows, preserving document order
keep_text <- sum_df$text[!is.na(sum_df$text) & nzchar(sum_df$text)]
if (length(keep_text) == 0) {
cat("  -> No textual content found in fallback for", bn, "\n")
} else {
# Append in chunks to keep paragraphs reasonable
chunk_size <- 40
groups <- split(keep_text, ceiling(seq_along(keep_text) / chunk_size))
for (g in groups) {
merged_doc <- body_add_par(merged_doc, paste(g, collapse = "\n"))
}
cat("  -> Fallback appended (plain text). Items appended:", length(keep_text), "\n")
}
}
# Add a page break after each appended SOP
merged_doc <- body_add_break(merged_doc)
}
suppressPackageStartupMessages({
library(officer)
library(rmarkdown) # for pandoc conversion wrapper (if pandoc exists)
})
script_dir <- getwd()
cat("Working directory:", script_dir, "\n")
# find SOP files
files <- list.files(pattern = "(?i)^SOP\\s*[0-9]+.*\\.docx$", full.names = TRUE)
files <- files[order(as.numeric(gsub("\\D", "", basename(files))))]
if (length(files) == 0) stop("No SOP Word files found in current directory.")
cat("Files to process:\n")
print(files)
# helper heading (doesn't rely on Word named styles)
add_heading_safe <- function(doc, txt, size = 14) {
hp <- fpar(ftext(txt, prop = fp_text(font.size = size, bold = TRUE)))
body_add_fpar(doc, hp)
}
# Start merged_doc from the first file
merged_doc <- read_docx(files[1])
cat("Started from:", basename(files[1]), "\n")
# bookkeeping
fallback_files <- character(0)
pandoc_repaired <- character(0)
# helper to attempt body_add_docx with tryCatch and return logical
try_body_add_docx <- function(doc, src_file) {
ok <- FALSE
res <- tryCatch(
{
doc2 <- body_add_docx(doc, src = src_file)
list(ok = TRUE, doc = doc2, err = NULL)
},
error = function(e) {
list(ok = FALSE, doc = doc, err = conditionMessage(e))
},
warning = function(w) {
# treat warnings as non-fatal but capture them
list(ok = TRUE, doc = doc, warn = conditionMessage(w), err = NULL)
}
)
return(res)
}
# loop through remaining files
for (f in files[-1]) {
bn <- basename(f)
cat("\n--- Processing:", bn, "---\n")
merged_doc <- add_heading_safe(merged_doc, bn)
# 1) try direct append
res1 <- try_body_add_docx(merged_doc, f)
if (isTRUE(res1$ok)) {
merged_doc <- res1$doc
cat("  -> appended with body_add_docx (format-preserving).\n")
merged_doc <- body_add_break(merged_doc)
next
} else {
cat("  -> body_add_docx ERROR:", res1$err, "\n")
}
# 2) try pandoc repair if available
pandoc_path <- rmarkdown::find_pandoc()$dir
if (nzchar(Sys.which("pandoc")) || nzchar(pandoc_path)) {
cat("  -> Attempting Pandoc repair (docx -> docx)...\n")
repaired <- tempfile(fileext = ".docx")
pandoc_ok <- FALSE
try(
{
# Use rmarkdown::pandoc_convert; it will call pandoc binary
rmarkdown::pandoc_convert(input = f, to = "docx", output = repaired, options = c())
pandoc_ok <- file.exists(repaired) && file.info(repaired)$size > 0
},
silent = TRUE
)
if (pandoc_ok) {
cat("  -> Pandoc produced repaired file:", repaired, "\n")
# try adding the repaired doc
res2 <- try_body_add_docx(merged_doc, repaired)
if (isTRUE(res2$ok)) {
merged_doc <- res2$doc
pandoc_repaired <- c(pandoc_repaired, bn)
cat("  -> appended repaired file (format-preserving).\n")
merged_doc <- body_add_break(merged_doc)
next
} else {
cat("  -> body_add_docx still failed on repaired doc:", res2$err, "\n")
}
} else {
cat("  -> Pandoc conversion did not create a valid repaired file or pandoc not found.\n")
}
} else {
cat("  -> Pandoc not available on this system; skipping repair attempt.\n")
}
# 3) fallback: extract text and append as paragraphs
cat("  -> Falling back to text extraction and appending plain text.\n")
fallback_files <- c(fallback_files, bn)
tmp_doc <- read_docx(f)
sum_df <- docx_summary(tmp_doc)
keep_text <- sum_df$text[!is.na(sum_df$text) & nzchar(sum_df$text)]
if (length(keep_text) > 0) {
chunk_size <- 50
groups <- split(keep_text, ceiling(seq_along(keep_text) / chunk_size))
for (g in groups) merged_doc <- body_add_par(merged_doc, paste(g, collapse = "\n"))
cat("  -> Fallback appended (text paragraphs). Items appended:", length(keep_text), "\n")
} else {
cat("  -> No textual content found for fallback.\n")
}
merged_doc <- body_add_break(merged_doc)
}
print(merged_doc, target = out)
cat("\nSaved merged file to:", out, "\n")
# Report
if (length(pandoc_repaired) > 0) {
cat("Pandoc repaired and appended files:\n")
print(pandoc_repaired)
}
if (length(fallback_files) > 0) {
cat("Files that required fallback (text-only append):\n")
print(fallback_files)
cat("Recommendation: open these files in Word, Save As (DOCX) or remove content-controls\n  (or update officer/pandoc), then re-run if you want full formatting preserved.\n")
} else {
cat("All files appended preserving format (no fallbacks).\n")
}
